From 44ccf7df76def6ced75588c4fb33dd927f55b556 Mon Sep 17 00:00:00 2001
From: "Frederic Pierret (Epitre)" <frederic.epitre@orange.fr>
Date: Tue, 19 Sep 2017 20:00:42 +0200
Subject: [PATCH 21/29] anaconda: require user password being set

Drop selectable option 'Require a password to use this account'. Make it required.

QubesOS/qubes-issues#2574
---
 pyanaconda/ui/gui/helpers.py        |  6 +++---
 pyanaconda/ui/gui/spokes/user.glade | 17 -----------------
 pyanaconda/ui/gui/spokes/user.py    | 38 ++++---------------------------------
 3 files changed, 7 insertions(+), 54 deletions(-)

diff --git a/pyanaconda/ui/gui/helpers.py b/pyanaconda/ui/gui/helpers.py
index 7d537f6..10f8c71 100644
--- a/pyanaconda/ui/gui/helpers.py
+++ b/pyanaconda/ui/gui/helpers.py
@@ -358,7 +358,7 @@ class GUISpokeInputCheckHandler(GUIInputCheckHandler, metaclass=ABCMeta):
             self._error = False
             result = InputCheck.CHECK_OK
         # Skip the check if no password is required
-        elif (not self.input_enabled) or self.input_kickstarted:
+        elif self.input_kickstarted:
             result = InputCheck.CHECK_OK
         elif self.input_confirmation and (self.input != self.input_confirmation):
             result = _(constants.PASSWORD_CONFIRM_ERROR_GUI)
@@ -380,7 +380,7 @@ class GUISpokeInputCheckHandler(GUIInputCheckHandler, metaclass=ABCMeta):
             return InputCheck.CHECK_OK
 
         # Skip the check if no password is required
-        if (not self.input_enabled) or self.input_kickstarted:
+        if self.input_kickstarted:
             return InputCheck.CHECK_OK
         # Also skip the check if the policy says that an empty password is fine
         # pylint: disable=no-member
@@ -422,7 +422,7 @@ class GUISpokeInputCheckHandler(GUIInputCheckHandler, metaclass=ABCMeta):
         self.set_input_status(status_text)
 
         # Skip the check if no password is required
-        if not self.input_enabled or self.input_kickstarted:
+        if self.input_kickstarted:
             return InputCheck.CHECK_OK
 
         # pylint: disable=no-member
diff --git a/pyanaconda/ui/gui/spokes/user.glade b/pyanaconda/ui/gui/spokes/user.glade
index 8030a2e..69cef13 100644
--- a/pyanaconda/ui/gui/spokes/user.glade
+++ b/pyanaconda/ui/gui/spokes/user.glade
@@ -192,23 +192,6 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="c_usepassword">
-                        <property name="label" translatable="yes" context="GUI|User">_Require a password to use this account</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_underline">True</property>
-                        <property name="xalign">0</property>
-                        <property name="active">True</property>
-                        <property name="draw_indicator">True</property>
-                        <signal name="toggled" handler="usepassword_toggled" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">4</property>
-                      </packing>
-                    </child>
-                    <child>
                       <object class="GtkBox" id="box2">
                         <property name="visible">True</property>
                         <property name="can_focus">False</property>
diff --git a/pyanaconda/ui/gui/spokes/user.py b/pyanaconda/ui/gui/spokes/user.py
index 2a9012d..d484937 100644
--- a/pyanaconda/ui/gui/spokes/user.py
+++ b/pyanaconda/ui/gui/spokes/user.py
@@ -320,16 +320,8 @@ class UserSpoke(NormalSpoke, GUISpokeInputCheckHandler):
         # the Gtk signal handlers use the input check variables.
 
         if self._password_kickstarted:
-            self.usepassword.set_active(True)
             self.pw.set_placeholder_text(_("The password was set by kickstart."))
             self.confirm.set_placeholder_text(_("The password was set by kickstart."))
-        elif not self.policy.emptyok:
-            # Policy is that a non-empty password is required
-            self.usepassword.set_active(True)
-
-        if not self.policy.emptyok:
-            # User isn't allowed to change whether password is required or not
-            self.usepassword.set_sensitive(False)
 
         # set the visibility of the password entries
         set_password_visibility(self.pw, False)
@@ -364,21 +356,12 @@ class UserSpoke(NormalSpoke, GUISpokeInputCheckHandler):
     def apply(self):
         # set the password only if the user enters anything to the text entry
         # this should preserve the kickstart based password
-        if self.input_enabled:
-            if self.pw.get_text():
-                self._password_kickstarted = False
-                self._user.password = cryptPassword(self.pw.get_text())
-                self._user.isCrypted = True
-                self.pw.set_placeholder_text("")
-                self.confirm.set_placeholder_text("")
-
-        # reset the password when the user unselects it
-        else:
+        if self.pw.get_text():
+            self._password_kickstarted = False
+            self._user.password = cryptPassword(self.pw.get_text())
+            self._user.isCrypted = True
             self.pw.set_placeholder_text("")
             self.confirm.set_placeholder_text("")
-            self._user.password = ""
-            self._user.isCrypted = False
-            self._password_kickstarted = False
 
         self._user.name = self.username.get_text()
 
@@ -405,19 +388,6 @@ class UserSpoke(NormalSpoke, GUISpokeInputCheckHandler):
     def completed(self):
         return len(self.data.user.userList) > 0
 
-    def usepassword_toggled(self, togglebutton=None, data=None):
-        """Called by Gtk callback when the "Use password" check
-        button is toggled. It will make password entries in/sensitive."""
-
-        self.input_enabled = togglebutton.get_active()
-
-        self.pw.set_sensitive(togglebutton.get_active())
-        self.confirm.set_sensitive(togglebutton.get_active())
-
-        # Re-check the password
-        self.pw.emit("changed")
-        self.confirm.emit("changed")
-
     def password_changed(self, editable=None, data=None):
         """Update the password strength level bar"""
         # Reset the counters used for the "press Done twice" logic
-- 
2.9.5

